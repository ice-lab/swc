import c from 'regenerator-runtime'; import d from 'fs'; import e from 'other';

function _arrayWithHoles(c) { if (Array.isArray(c)) return c; } function asyncGeneratorStep(l, d, e, m, n, h, i) { try { var j = l[h](i); var c = j.value; } catch (l) { e(l); return; }j.done ? d(c) : Promise.resolve(c).then(m, n); } function _asyncToGenerator(h) { return function () { const i = this; const j = arguments; return new Promise((d, e) => { const l = h.apply(i, j); function m(c) { asyncGeneratorStep(l, d, e, m, n, 'next', c); } function n(l) { asyncGeneratorStep(l, d, e, m, n, 'throw', l); }m(void 0); }); }; } function _iterableToArray(c) { if (Symbol.iterator in Object(c) || Object.prototype.toString.call(c) === '[object Arguments]') return Array.from(c); } function _iterableToArrayLimit(c, d) { const f = []; let g = !0; let h = !1; let i = void 0; try { for (var j, k = c[Symbol.iterator](); !(g = (j = k.next()).done) && (f.push(j.value), !d || f.length !== d); g = !0); } catch (l) { h = !0, i = l; } finally { try { g || k.return == null || k.return(); } finally { if (h) throw i; } } return f; } function _nonIterableRest() { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } function _slicedToArray(c, d) { return _arrayWithHoles(c) || _iterableToArrayLimit(c, d) || _nonIterableRest(); } function _toArray(c) { return _arrayWithHoles(c) || _iterableToArray(c) || _nonIterableRest(); } const _promises = _toArray(d.promises); const a = _promises[0]; const b = _promises[1]; const rest = _promises.slice(2); const _other = _slicedToArray(e, 2); const foo = _other[0]; const bar = _other[1]; function _getStaticProps() { return (_getStaticProps = _asyncToGenerator(c.mark(function d() { return c.wrap((c) => { for (;;) switch (c.prev = c.next) { case 0: case 'end': return c.stop(); } }, d); }))).apply(this, arguments); } export function getStaticProps() { return _getStaticProps.apply(this, arguments); } export default function c() { return React.createElement('div', null); }
